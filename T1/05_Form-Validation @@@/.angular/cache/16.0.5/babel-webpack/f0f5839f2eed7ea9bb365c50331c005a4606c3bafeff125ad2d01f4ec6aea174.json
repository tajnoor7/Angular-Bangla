{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n// Password-ConfirmPassword mismached fn()\nfunction matchPasswordValidator(passwordKey) {\n  return control => {\n    const password = control.root.get(passwordKey);\n    const confirmPassword = control.value;\n    if (password && confirmPassword !== password.value) {\n      return {\n        'passwordMismatch': true\n      };\n    }\n    return null;\n  };\n}\nlet FirstComponent = class FirstComponent {\n  constructor() {\n    //User name Validators for \"First Name\" & \"Last Name\"\n    this.nameValidators = [Validators.required, Validators.minLength(3), Validators.maxLength(30)];\n    //Password Validators for \"Password\" & \"Confirm Password\"\n    this.passwordValidators = [Validators.required, Validators.minLength(8), Validators.maxLength(30), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')];\n    this.person = {};\n    this.myForm = new FormGroup({\n      firstName: new FormControl(this.person.firstName, this.nameValidators),\n      lastName: new FormControl(this.person.lastName, this.nameValidators),\n      email: new FormControl(this.person.email, [Validators.required, Validators.email]),\n      password: new FormControl(this.person.password, this.passwordValidators),\n      confirmPassword: new FormControl(this.person.confirmPassword, [...this.passwordValidators, matchPasswordValidator('password') // Add custom validator to check for password match\n      ])\n    });\n  }\n\n  ngOnInit() {}\n  //get method\n  get firstName() {\n    return this.myForm.get('firstName');\n  }\n  get lastName() {\n    return this.myForm.get('lastName');\n  }\n  get email() {\n    return this.myForm.get('email');\n  }\n  get password() {\n    return this.myForm.get('password');\n  }\n  get confirmPassword() {\n    return this.myForm.get('confirmPassword');\n  }\n  //for Submit button\n  onSubmit() {\n    console.log(this.myForm.value);\n  }\n};\nFirstComponent = __decorate([Component({\n  selector: 'first-root',\n  templateUrl: './first.component.html',\n  styleUrls: ['./first.component.css']\n})], FirstComponent);\nexport { FirstComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","matchPasswordValidator","passwordKey","control","password","root","get","confirmPassword","value","FirstComponent","constructor","nameValidators","required","minLength","maxLength","passwordValidators","pattern","person","myForm","firstName","lastName","email","ngOnInit","onSubmit","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/sabbir/Desktop/git/Angular-Bangla/05_Form-Validation @@@/src/app/first/first.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\n\n\nexport interface Person {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\n// Password-ConfirmPassword mismached fn()\nfunction matchPasswordValidator(passwordKey: string): ValidatorFn {\n  return (control: AbstractControl): { [key: string]: any } | null => {\n    const password = control.root.get(passwordKey);\n    const confirmPassword = control.value;\n    if (password && confirmPassword !== password.value) {\n      return { 'passwordMismatch': true };\n    }\n    return null;\n  };\n}\n\n@Component({\n  selector: 'first-root',\n  templateUrl: './first.component.html',\n  styleUrls: ['./first.component.css']\n})\n\n\nexport class FirstComponent implements OnInit {\n  // user: User;\n  person: Person;\n\n\n  //User name Validators for \"First Name\" & \"Last Name\"\n  nameValidators = [\n    Validators.required,\n    Validators.minLength(3),\n    Validators.maxLength(30)\n  ];\n\n  //Password Validators for \"Password\" & \"Confirm Password\"\n  passwordValidators = [\n    Validators.required,\n    Validators.minLength(8),\n    Validators.maxLength(30),\n    Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n  ];\n\n  constructor() {\n    this.person = {} as Person;\n    this.myForm = new FormGroup({\n      firstName: new FormControl(this.person.firstName, this.nameValidators),\n      lastName: new FormControl(this.person.lastName, this.nameValidators),\n      email: new FormControl(this.person.email, [Validators.required, Validators.email]),\n      password: new FormControl(this.person.password, this.passwordValidators),\n      confirmPassword: new FormControl(this.person.confirmPassword, [\n        ...this.passwordValidators,\n        matchPasswordValidator('password') // Add custom validator to check for password match\n      ])\n    });\n  }\n\n\n  ngOnInit(): void {}\n\n  \n  // Form\n  myForm: FormGroup;\n\n\n  //get method\n  get firstName() {\n    return this.myForm.get('firstName');\n  }\n  get lastName() {\n    return this.myForm.get('lastName');\n  }\n  get email() {\n    return this.myForm.get('email');\n  }\n  get password() {\n    return this.myForm.get('password');\n  }\n  get confirmPassword() {\n    return this.myForm.get('confirmPassword');\n  }\n\n  //for Submit button\n  onSubmit() {\n    console.log(this.myForm.value);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}